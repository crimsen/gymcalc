/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.gymcalc.exercise.provider;

import de.gymcalc.exercise.util.ExerciseAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExerciseItemProviderAdapterFactory extends ExerciseAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExerciseItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.Exercise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseItemProvider exerciseItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.Exercise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseAdapter() {
		if (exerciseItemProvider == null) {
			exerciseItemProvider = new ExerciseItemProvider(this);
		}

		return exerciseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ElementInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementInstanceItemProvider elementInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ElementInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementInstanceAdapter() {
		if (elementInstanceItemProvider == null) {
			elementInstanceItemProvider = new ElementInstanceItemProvider(this);
		}

		return elementInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.Ruleset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RulesetItemProvider rulesetItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.Ruleset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRulesetAdapter() {
		if (rulesetItemProvider == null) {
			rulesetItemProvider = new RulesetItemProvider(this);
		}

		return rulesetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.RuleElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleElementsItemProvider ruleElementsItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.RuleElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleElementsAdapter() {
		if (ruleElementsItemProvider == null) {
			ruleElementsItemProvider = new RuleElementsItemProvider(this);
		}

		return ruleElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.RuleGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleGroupItemProvider ruleGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.RuleGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleGroupAdapter() {
		if (ruleGroupItemProvider == null) {
			ruleGroupItemProvider = new RuleGroupItemProvider(this);
		}

		return ruleGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.RuleSpecialGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleSpecialGroupItemProvider ruleSpecialGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.RuleSpecialGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleSpecialGroupAdapter() {
		if (ruleSpecialGroupItemProvider == null) {
			ruleSpecialGroupItemProvider = new RuleSpecialGroupItemProvider(this);
		}

		return ruleSpecialGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.RuleFinalElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleFinalElementItemProvider ruleFinalElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.RuleFinalElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleFinalElementAdapter() {
		if (ruleFinalElementItemProvider == null) {
			ruleFinalElementItemProvider = new RuleFinalElementItemProvider(this);
		}

		return ruleFinalElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.InitialValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialValueItemProvider initialValueItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.InitialValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialValueAdapter() {
		if (initialValueItemProvider == null) {
			initialValueItemProvider = new InitialValueItemProvider(this);
		}

		return initialValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ElementGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementGroupItemProvider elementGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ElementGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementGroupAdapter() {
		if (elementGroupItemProvider == null) {
			elementGroupItemProvider = new ElementGroupItemProvider(this);
		}

		return elementGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ElementReferenceGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementReferenceGroupItemProvider elementReferenceGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ElementReferenceGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementReferenceGroupAdapter() {
		if (elementReferenceGroupItemProvider == null) {
			elementReferenceGroupItemProvider = new ElementReferenceGroupItemProvider(this);
		}

		return elementReferenceGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.Gadget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GadgetItemProvider gadgetItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.Gadget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGadgetAdapter() {
		if (gadgetItemProvider == null) {
			gadgetItemProvider = new GadgetItemProvider(this);
		}

		return gadgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ExerciseRuleCont} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseRuleContItemProvider exerciseRuleContItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ExerciseRuleCont}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseRuleContAdapter() {
		if (exerciseRuleContItemProvider == null) {
			exerciseRuleContItemProvider = new ExerciseRuleContItemProvider(this);
		}

		return exerciseRuleContItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ExerciseCont} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseContItemProvider exerciseContItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ExerciseCont}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseContAdapter() {
		if (exerciseContItemProvider == null) {
			exerciseContItemProvider = new ExerciseContItemProvider(this);
		}

		return exerciseContItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.DifficultyValueEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DifficultyValueEntryItemProvider difficultyValueEntryItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.DifficultyValueEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDifficultyValueEntryAdapter() {
		if (difficultyValueEntryItemProvider == null) {
			difficultyValueEntryItemProvider = new DifficultyValueEntryItemProvider(this);
		}

		return difficultyValueEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ExerciseEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExerciseEventItemProvider exerciseEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ExerciseEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExerciseEventAdapter() {
		if (exerciseEventItemProvider == null) {
			exerciseEventItemProvider = new ExerciseEventItemProvider(this);
		}

		return exerciseEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.gymcalc.exercise.ElementEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementEventItemProvider elementEventItemProvider;

	/**
	 * This creates an adapter for a {@link de.gymcalc.exercise.ElementEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementEventAdapter() {
		if (elementEventItemProvider == null) {
			elementEventItemProvider = new ElementEventItemProvider(this);
		}

		return elementEventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (exerciseItemProvider != null) exerciseItemProvider.dispose();
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (elementInstanceItemProvider != null) elementInstanceItemProvider.dispose();
		if (rulesetItemProvider != null) rulesetItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (ruleElementsItemProvider != null) ruleElementsItemProvider.dispose();
		if (ruleGroupItemProvider != null) ruleGroupItemProvider.dispose();
		if (ruleSpecialGroupItemProvider != null) ruleSpecialGroupItemProvider.dispose();
		if (ruleFinalElementItemProvider != null) ruleFinalElementItemProvider.dispose();
		if (initialValueItemProvider != null) initialValueItemProvider.dispose();
		if (elementGroupItemProvider != null) elementGroupItemProvider.dispose();
		if (elementReferenceGroupItemProvider != null) elementReferenceGroupItemProvider.dispose();
		if (gadgetItemProvider != null) gadgetItemProvider.dispose();
		if (exerciseRuleContItemProvider != null) exerciseRuleContItemProvider.dispose();
		if (exerciseContItemProvider != null) exerciseContItemProvider.dispose();
		if (difficultyValueEntryItemProvider != null) difficultyValueEntryItemProvider.dispose();
		if (exerciseEventItemProvider != null) exerciseEventItemProvider.dispose();
		if (elementEventItemProvider != null) elementEventItemProvider.dispose();
	}

}
